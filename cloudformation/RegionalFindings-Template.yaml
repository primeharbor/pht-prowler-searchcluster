# Copyright 2021-2023 Chris Farris <chrisf@primeharbor.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: '2010-09-09'
Description: Capture Regional Security Tool Findings into OpenSearch
Transform: AWS::Serverless-2016-10-31


Parameters:

  pBucketName:
    Description: Name of pre-existing Bucket to store findings and backups
    Type: String

  pAuditRoleName:
    Description: Default name of the AssumeRole to assume into accounts
    Type: String
    Default: security-audit

  pTemplateURL:
    Description: URL to the Transformed Template this stack was deployed with (for promotion to another environment)
    Type: String


  pEventBusName:
    Description: Name of the centralEvent Bus to create
    Type: String

  #
  # ES
  #
  pDomainArn:
    Description: OpenSearch Domain ARN (for lambda perms)
    Type: String

  pDomainEndpoint:
    Description: Hostname of the Domain Endpoint
    Type: String

  pLambdaSize:
    Description: Memory/CPU Size of the Lambda
    Type: String
    Default: 2048

Globals:
  Function:
    Runtime: python3.9
    MemorySize: !Ref pLambdaSize
    Timeout: 300
    Environment:
      Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          BUCKET: !Ref pBucketName
          ROLE_NAME: !Ref pAuditRoleName
          LOG_LEVEL: 'INFO'



Resources:

  # ExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     # RoleName: AWSCloudFormationStackSetExecutionRole
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             AWS:
  #               - !Ref AWS::AccountId
  #           Action:
  #             - sts:AssumeRole
  #     Path: /
  #     ManagedPolicyArns:
  #       - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess

  AdministrationRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: AWSCloudFormationStackSetAdministrationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AssumeRole-AWSCloudFormationStackSetExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !GetAtt ExecutionRole.Arn


  EventStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      AdministrationRoleARN: !GetAtt AdministrationRole.Arn
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      Description:  StackSet to Eventbridge to all regions
      # ExecutionRoleName: !Ref ExecutionRole
      OperationPreferences:
        # Per the docs: MaxConcurrentCount is at most one more than the FailureToleranceCount.
        FailureTolerancePercentage: 100
        MaxConcurrentPercentage: 100
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: pEventBusRoleArn
          ParameterValue: !GetAtt EventBusRole.Arn
        - ParameterKey: pEventBusDestinationArn
          ParameterValue: !GetAtt EventBus.Arn
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref AWS::AccountId
          Regions:
            - us-east-1
            - eu-north-1
            - ap-south-1
            - eu-west-3
            - eu-west-2
            - eu-west-1
            - ap-northeast-3
            - ap-northeast-2
            - ap-northeast-1
            - sa-east-1
            - ca-central-1
            - ap-southeast-1
            - ap-southeast-2
            - eu-central-1
            - us-east-2
            - us-west-1
            - us-west-2
      StackSetName: !Sub "${AWS::StackName}-StackSet"
      TemplateBody: |
        AWSTemplateFormatVersion: '2010-09-09'
        Description: Deploy EventBusRules to ingest Security Service Findings for each region

        Parameters:

          pEventBusRoleArn:
            Description: EventBus Role Arn
            Type: String

          pEventBusDestinationArn:
            Description: ARN of the EventBus in the central account where Events are sent
            Type: String

        Resources:

          EventRule:
            Type: AWS::Events::Rule
            Properties:
              Description: Send Security Events to Single Region
              State: ENABLED
              EventPattern:
                source:
                  - "aws.access-analyzer"
                  - "aws.macie"
                  - "aws.inspector2"
                  - "aws.guardduty"
              Targets:
                - Arn: !Ref pEventBusDestinationArn
                  Id: SecurityEvent
                  RoleArn: !Ref pEventBusRoleArn


        Outputs:
          TemplateVersion:
            Value: "0.0.4"

        ######## End of StackSet Instance Template

  EventBus:
    Type: 'AWS::Events::EventBus'
    Properties:
      Name: !Ref pEventBusName

  # EventBusPolicy:
  #   Type: 'AWS::Events::EventBusPolicy'
  #   Properties:
  #     EventBusName: !Ref EventBus
  #     StatementId: !Sub "${AWS::StackName}-eventbus-policy"
  #     Statement:
  #       Effect: 'Allow'
  #       Action: 'events:PutEvents'
  #       Principal: '*'
  #       Resource: !GetAtt EventBus.Arn
  #       Condition:
  #         StringEquals:
  #           'aws:PrincipalOrgID': !Ref pAWSOrganizationId


  EventBusRole:
    Type: 'AWS::IAM::Role'
    Properties:
      # RoleName: !Ref pEventBusRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'MainEventBus'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - events:PutEvents
              Resource: !GetAtt EventBus.Arn


  #
  # Lambda Functions
  #
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${pBucketName}/*'
              - !Sub 'arn:aws:s3:::${pBucketName}'
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: AssumeCrossAccountRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - sts:AssumeRole
            Resource: !Sub "arn:aws:iam::*:role/${pAuditRoleName}"
      - PolicyName: IndexData
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: !Sub "${pDomainArn}/*"
            Action:
            - es:*
            Effect: Allow

  ProcessRegionalFindingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-process-findings"
      Description: Process Regional Findings pushed to EventBus
      Handler: process_regional_finding.handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../lambda
      ReservedConcurrentExecutions: 10
      Events:
        InspectorEventBridge:
            Type: EventBridgeRule
            Properties:
              EventBusName: !Ref EventBus
              Pattern:
                source:
                - "aws.access-analyzer"
                - "aws.macie"
                - "aws.inspector2"
                - "aws.guardduty"
              State: ENABLED
      Environment:
        Variables:
          ES_DOMAIN_ENDPOINT: !Ref pDomainEndpoint

  ProcessRegionalFindingsFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ProcessRegionalFindingsFunction}-LambdaErrors
      AlarmDescription: "Alarm if lambda errors out"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref ProcessRegionalFindingsFunction
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 1
      Period: 60
      TreatMissingData: "ignore"
      # AlarmActions:
      #   - !Ref SlackSNSTopic

Outputs:
  TemplateURL:
    Description: URL to the Transformed Template this stack was deployed with (for promotion to another environment)
    Value: !Ref pTemplateURL




# EOF
