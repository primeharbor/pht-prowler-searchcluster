# Copyright 2024 Chris Farris <chrisf@primeharbor.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: '2010-09-09'
Description: Process JSON findings from Prowler into a Google Sheet
Transform: AWS::Serverless-2016-10-31

Parameters:

  pBucketName:
    Description: Name of the bucket to hold the prowler results
    Type: String

  pTemplateURL:
    Description: URL to the Transformed Template this stack was deployed with (for promotion to another environment)
    Type: String

  pGoogleSheetSecretArn:
    Description: ARN of the SecretsManager Secret with the credentials to Google
    Type: String

  pGoogleDriveFolderId:
    Description: ID of the Google Folder to Create files in
    Type: String

  pProwlerOutputNotificationTopicArn:
    Description: ARN of the SNS Topic with the S3 Event Notifications from Prowler
    Type: String

  pProwlerBucketGCPEventTopicArn:
    Description: ARN of the SNS Topic with the GCP S3 Event Notifications from Prowler
    Type: String

  pAlertTopicArn:
    Description: Topic for Any Alerts or Alarms to be sent to
    Type: String
    Default: None

  pLambdaSize:
    Description: Memory/CPU Size of the Lambda
    Type: String
    Default: 2048

Conditions:
  cAlarmActions: !Not [!Equals [ !Ref pAlertTopicArn, "None" ]]

Globals:
  Function:
    Runtime: python3.12
    MemorySize: !Ref pLambdaSize
    Environment:
      Variables:
          BUCKET: !Ref pBucketName
          LOG_LEVEL: 'INFO'
          GSHEET_SECRET: !Ref pGoogleSheetSecretArn
          GOOGLE_DRIVE_ID: !Ref pGoogleDriveFolderId

Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${pBucketName}/*'
              - !Sub 'arn:aws:s3:::${pBucketName}'
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: GetMessages
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource:
            - !GetAtt ProwlerEventQueue.Arn
            Action:
            - sqs:*
            Effect: Allow
      - PolicyName: GetSecret
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource:
            - !Ref pGoogleSheetSecretArn
            Action:
            - secretsmanager:GetSecretValue
            Effect: Allow

  #
  # Prowler Scorecard
  #
  ProwlerScorecardFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-prowler-scorecard"
      Description: Add Prowler Findings to Google Sheet
      Handler: prowler_scorecard.handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../gsheet-lambda
      Timeout: 900
      Events:
        SQSIngest:
          Type: SQS
          Properties:
            BatchSize: 1
            Enabled: True
            Queue: !GetAtt ProwlerEventQueue.Arn

  ProwlerScorecardFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ProwlerScorecardFunction}-LambdaErrors
      AlarmDescription: "Alarm if lambda errors out"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref ProwlerScorecardFunction
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 1
      Period: 60
      TreatMissingData: "ignore"
      AlarmActions:
        - !If
          - cAlarmActions
          - !Ref pAlertTopicArn
          - !Ref AWS::NoValue
      OKActions:
        - !If
          - cAlarmActions
          - !Ref pAlertTopicArn
          - !Ref AWS::NoValue


  #
  # Prowler SQS Queue
  #
  ProwlerEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      # Any messages older than an hour are probably out-of-date
      MessageRetentionPeriod: 36000
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 900

  ProwlerEventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProwlerEventQueue
      PolicyDocument:
        Version: '2012-10-17'
        Id: AllowS3
        Statement:
        - Sid: AllowS3EventNotification
          Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - SQS:SendMessage
          Resource: !GetAtt ProwlerEventQueue.Arn
          Condition:
            ArnLike:
              aws:SourceArn: !Sub "arn:aws:s3:*:*:${pBucketName}"
        - Sid: Allow-SNS-SendMessage
          Effect: Allow
          Principal: "*"
          Action:
          - sqs:SendMessage
          Resource: !GetAtt ProwlerEventQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn:
              - !Ref pProwlerOutputNotificationTopicArn
              - !Ref pProwlerBucketGCPEventTopicArn

  ProwlerEventQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt ProwlerEventQueue.Arn
      Protocol: sqs
      TopicArn: !Ref pProwlerOutputNotificationTopicArn

  ProwlerEventQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      AlarmActions:
        - !If
          - cAlarmActions
          - !Ref pAlertTopicArn
          - !Ref AWS::NoValue
      AlarmDescription: "Alert when Queue doesn't properly drain"
      AlarmName: !Sub "${AWS::StackName}-Queue"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ProwlerEventQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      OKActions:
        - !If
          - cAlarmActions
          - !Ref pAlertTopicArn
          - !Ref AWS::NoValue
      Period: 300
      Statistic: Average
      Threshold: 3
      TreatMissingData: missing

  ProwlerGCPEventQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt ProwlerEventQueue.Arn
      Protocol: sqs
      TopicArn: !Ref pProwlerBucketGCPEventTopicArn

Outputs:
  TemplateURL:
    Description: URL to the Transformed Template this stack was deployed with (for promotion to another environment)
    Value: !Ref pTemplateURL
